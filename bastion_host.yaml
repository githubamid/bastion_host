AWSTemplateFormatVersion: 2010-09-09
Description: 'Bastion Host in AutoSG with two subnet'
#-------------------------------Parameters----------------------------------
Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

          #--------  For VPC -------------

#  VpcCIDR:
#    Description: IP range for this VPC
#    Type: String
#    Default: 10.1.0.0/16

  VPC:
   Description:  VPC list for the Region
   Type: 'AWS::EC2::VPC::Id'
   ConstraintDescription: must be the name of an existing VPC.

  Subnets:
   Description:  Subnet list for the VPC
   Type: 'List<AWS::EC2::Subnet::Id>'
   ConstraintDescription: must be the name of an existing Subnet.

#  PublicSubnetAcidr:
#    Description:  IP range  for the public subnet A
#    Type: String
#    Default: 10.1.11.0/24

#  PublicSubnetBcidr:
#    Description:  IP range  for the public subnet B
#    Type: String
#    Default: 10.1.21.0/24

        #--------  For AutoSG -------------

  LatestAMIid:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

#  MaxSizeASG:
#    Description: Enter the Max Size for the ASG
#    Type: String
#    Default: 1
#  MinSizeASG:
#    Description: Enter the Min Size for the ASG
#    Type: String
#    Default: 1
#  DesiredCapacityASG:
#    Description: Enter the desired capacity for the ASG
#    Type: String
#    Default: 1
#  VPCZoneIdentifier:
#    Description: List the Subnet Ids of the instances
#    Type: List<AWS::EC2::Subnet::Id>
  KeyName:
   Type: 'AWS::EC2::KeyPair::KeyName'
   ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: EC2 instance type
    Type: String
    AllowedValues:
      - t2.micro
      - m1.small
      - m1.large
    Description: Enter t2.micro, m1.small, or m1.large. Default is t2.micro.

          #--------  SecurityGroup -------------
#  SSHLocation:
#    Description: The IP address range that can be used to SSH to the EC2 instances
#    MinLength: '9'
#    MaxLength: '18'
#    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
#    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  #InstanceSecurityGroup:
  #  Description: List of Security Group IDs
  #  Type: List<AWS::EC2::SecurityGroup::Id>
#-------------------------------Metadata----------------------------------

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: "Environment"
      Parameters:
      - EnvironmentName
    - Label:
        default: "Network Configuration"
      Parameters:
      - VPC
      - Subnets
#    - Label:
#        default: "AutoScalingGroup Configuration"
#      Parameters:
#      - MinSizeASG
#      - DesiredCapacityASG
    - Label:
        default: "BastionHost Configuration"
      Parameters:
      - InstanceType
      - KeyName
      - LatestAMIid

#-------------------------------Resources----------------------------------

Resources:
  # VPC:
  #   Type: AWS::EC2::VPC
  #   Properties:
  #     CidrBlock: !Ref VPCList
  #     EnableDnsSupport: true
  #     EnableDnsHostnames: true
  #     InstanceTenancy: default
  #     Tags:
  #     - Key: Name
  #       Value: !Join ['', [!Ref EnvironmentName, -VPC ]]

  # InternetGateway:
  #   Type: AWS::EC2::InternetGateway
  #   Properties:
  #     Tags:
  #       - Key: Name
  #         Value: !Join ['', [!Ref EnvironmentName, -IGW ]]
  #
  # InternetGatewayAttachment:
  #   Type: AWS::EC2::VPCGatewayAttachment
  #   Properties:
  #     InternetGatewayId: !Ref InternetGateway
  #     VpcId: !Ref VPC

  BHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
     VpcId: !Ref VPC
     GroupDescription: Enable SSH access via port 22
     SecurityGroupIngress:
       - IpProtocol: tcp
         FromPort: '22'
         ToPort: '22'
         CidrIp: 0.0.0.0/0

          #--------------- Creation subnet AZ - A and B ----------------------
#  PublicSubnetA:
#    Type: AWS::EC2::Subnet
#    Properties:
#      VpcId: !Ref VPC
#      AvailabilityZone: !Select [ 0, !GetAZs ]
#      CidrBlock: !Ref PublicSubnetAcidr
#      MapPublicIpOnLaunch: true
#      Tags:
#        - Key: Name
#          Value: !Sub ${EnvironmentName}-Public-SubnetA


#  PublicSubnetB:
#    Type: AWS::EC2::Subnet
#    Properties:
#      VpcId: !Ref VPC
#      AvailabilityZone: !Select [ 1, !GetAZs ]
#      CidrBlock: !Ref PublicSubnetBcidr
#      MapPublicIpOnLaunch: true
#      Tags:
#        - Key: Name
#          Value: !Sub ${EnvironmentName}-Public-SubnetB


      #--------------- Creat Public Route Table ----------------------
  # PublicRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${EnvironmentName} Public Routes
  #
  # PublicRoute:
  #   DependsOn: InternetGatewayAttachment
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     GatewayId: !Ref InternetGateway
  #
  # PublicSubnetARouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTable
  #     SubnetId: !Ref PublicSubnetA
  #
  # PublicSubnetBRouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTable
  #     SubnetId: !Ref PublicSubnetB

   #------------------IAM ROLE-------------------------------
  EC2Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
  Ec2Policy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "EC2Policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "ec2:AssociateAddress"
              - "ec2:DisassociateAddress"
            Resource: "*"
      Roles:
        - !Ref EC2Role
  EC2Profile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref EC2Role
  #------------------AutoScaling-------------------------------
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  AutoSGLaunchCF:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAMIid
      UserData:
        Fn::Base64:                                # YAML makes userdata much cleaner
          !Sub |
              #!/bin/bash
              sudo yum -y update
              sudo yum install -y httpd
              INSTANCE_ID=`/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id`
              aws ec2 associate-address --instance-id $INSTANCE_ID --allocation-id ${EIP.AllocationId} --region ${AWS::Region}
      SecurityGroups:
        - !Ref BHSecurityGroup
      IamInstanceProfile: !Ref EC2Profile
      InstanceType: !Ref InstanceType
#        LaunchConfigurationName: AutoSGLaunchCF

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: AutoSG for BastionHost
      Cooldown: 120
      DesiredCapacity: 1
      LaunchConfigurationName: !Ref AutoSGLaunchCF
      MaxSize: 1
      MinSize: 1
      Tags:
        -
          Key: Name
          Value: BastionHostASG
          PropagateAtLaunch: 'true'
      VPCZoneIdentifier:
        Ref: Subnets



#-------------------------------Outputs----------------------------------
Outputs:
  Region:
    Description: "Current Region"
    Value: !Ref "AWS::Region"
  # LastAMI:
  #  Description: "Last Amazon AMI"
  #  Value: !Ref LatestAMIid
  # VPC:
  #  Description: "Current VPC"
  #  Value: !Ref VPC
  # EIP:
  #  Description: "Allocation Id"
  #  Value: !GetAtt EIP.AllocationId
