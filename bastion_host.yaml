AWSTemplateFormatVersion: 2010-09-09
Description: 'Bastion Host in AutoSG with two subnet'
#-------------------------------Parameters----------------------------------
Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

          #--------  For VPC -------------

  VpcCIDR:
    Description: IP range for this VPC
    Type: String
    Default: 10.1.0.0/16

  PublicSubnetAcidr:
    Description:  IP range  for the public subnet A
    Type: String
    Default: 10.1.11.0/24

  PublicSubnetBcidr:
    Description:  IP range  for the public subnet B
    Type: String
    Default: 10.1.21.0/24

        #--------  For AutoSG -------------

  LatestAMIid:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  MaxSizeASG:
    Description: Enter the Max Size for the ASG
    Type: String
    Default: 1
  MinSizeASG:
    Description: Enter the Min Size for the ASG
    Type: String
    Default: 1
  DesiredCapacityASG:
    Description: Enter the desired capacity for the ASG
    Type: String
    Default: 1
#  VPCZoneIdentifier:
#    Description: List the Subnet Ids of the instances
#    Type: List<AWS::EC2::Subnet::Id>
  KeyName:
   Type: 'AWS::EC2::KeyPair::KeyName'
   ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro

          #--------  SecurityGroup -------------
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  #InstanceSecurityGroup:
  #  Description: List of Security Group IDs
  #  Type: List<AWS::EC2::SecurityGroup::Id>

#-------------------------------Resources----------------------------------

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Join ['', [!Ref EnvironmentName, -VPC ]]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref EnvironmentName, -IGW ]]

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  BHSecurityGroup:
   Type: 'AWS::EC2::SecurityGroup'
   Properties:
     VpcId: !Ref VPC
     GroupDescription: Enable SSH access via port 22
     SecurityGroupIngress:
       - IpProtocol: tcp
         FromPort: '22'
         ToPort: '22'
         CidrIp: !Ref SSHLocation

          #--------------- Creation subnet AZ - A and B ----------------------
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Ref PublicSubnetAcidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-SubnetA


  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !Ref PublicSubnetBcidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-SubnetB


      #--------------- Creat Public Route Table ----------------------
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

      #------------------AutoScaling-------------------------------
  AutoSGLaunchCF:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        KeyName: !Ref KeyName
        ImageId: !Ref LatestAMIid
        SecurityGroups:
              - !Ref BHSecurityGroup
        InstanceType: !Ref InstanceType
#        LaunchConfigurationName: AutoSGLaunchCF

  AutoScalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        AutoScalingGroupName: AutoSG for BastionHost
        Cooldown: 120
        DesiredCapacity: !Ref DesiredCapacityASG
        LaunchConfigurationName: !Ref AutoSGLaunchCF
        MaxSize: !Ref MaxSizeASG
        MinSize: !Ref MinSizeASG
        Tags:
          -
            Key: Name
            Value: ASGBastionHost
            PropagateAtLaunch: 'true'
        VPCZoneIdentifier:
              - !Ref PublicSubnetA
              - !Ref PublicSubnetB


#-------------------------------Outputs----------------------------------
Outputs:
  Region:
    Description: "Current Region"
    Value:
      Ref: "AWS::Region"
  LastAMI:
   Description: "Last Amazon AMI"
   Value: !Ref LatestAMIid
  VPC:
   Description: "Current VPC"
   Value: !Ref VPC
